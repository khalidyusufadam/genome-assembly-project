
import au.com.bytecode.opencsv.CSVReader;
import java.awt.FileDialog;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author khali
 */
public class genomeAssemblyFrame extends javax.swing.JFrame {

    /**
     * Creates new form genomeAssemblyFrame
     */
    public genomeAssemblyFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        getGenomeStat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fastaDisplayArea = new javax.swing.JTextArea();
        genomeAssemblyAppLabel = new javax.swing.JLabel();
        fastaDisplayLabel = new javax.swing.JLabel();
        scaffoldsComboBox = new javax.swing.JComboBox<>();
        selectedScaffoldLabel = new javax.swing.JLabel();
        gcContentDisplayLabel = new javax.swing.JLabel();
        scaffoldLengthDisplayLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        gtfTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        scaffoldTextArea = new javax.swing.JTextArea();
        GTFtableLabel = new javax.swing.JLabel();
        scfListLabel = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        graphicsLabel = new javax.swing.JLabel();
        genomeAssemblyAppMenuBar = new javax.swing.JMenuBar();
        openGenomeFile = new javax.swing.JMenu();
        openFastaItem = new javax.swing.JMenuItem();
        openGTFMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        getGenomeStat.setText("getAssemblyMetrics");
        getGenomeStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getGenomeStatActionPerformed(evt);
            }
        });

        fastaDisplayArea.setEditable(false);
        fastaDisplayArea.setColumns(20);
        fastaDisplayArea.setRows(5);
        jScrollPane1.setViewportView(fastaDisplayArea);

        genomeAssemblyAppLabel.setText("genomeAssemblyApp");

        fastaDisplayLabel.setText("FASTA sequence");

        scaffoldsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaffoldsComboBoxActionPerformed(evt);
            }
        });

        selectedScaffoldLabel.setText("selectedScaffold:");

        gtfTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(gtfTable1);

        jScrollPane2.setWheelScrollingEnabled(false);

        scaffoldTextArea.setColumns(20);
        scaffoldTextArea.setRows(5);
        scaffoldTextArea.setAutoscrolls(false);
        jScrollPane2.setViewportView(scaffoldTextArea);

        GTFtableLabel.setText("Augustus Genes Hits");

        scfListLabel.setText("scf List:");

        jProgressBar1.setBackground(new java.awt.Color(0, 0, 0));
        jProgressBar1.setForeground(new java.awt.Color(102, 0, 0));

        graphicsLabel.setText("Scaffold graphics");

        openGenomeFile.setText("File");
        openGenomeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGenomeFileActionPerformed(evt);
            }
        });

        openFastaItem.setText("openFASTA");
        openFastaItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFastaItemActionPerformed(evt);
            }
        });
        openGenomeFile.add(openFastaItem);

        openGTFMenuItem1.setText("openGTF/GFF");
        openGTFMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGTFMenuItem1ActionPerformed(evt);
            }
        });
        openGenomeFile.add(openGTFMenuItem1);

        genomeAssemblyAppMenuBar.add(openGenomeFile);

        jMenu2.setText("Edit");
        genomeAssemblyAppMenuBar.add(jMenu2);

        setJMenuBar(genomeAssemblyAppMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(getGenomeStat)
                                        .addGap(30, 30, 30)
                                        .addComponent(scfListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scaffoldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(graphicsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fastaDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(590, 590, 590)
                                        .addComponent(genomeAssemblyAppLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(selectedScaffoldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(scaffoldLengthDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(gcContentDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(GTFtableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(fastaDisplayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(getGenomeStat)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(scaffoldsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(scfListLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GTFtableLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(selectedScaffoldLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(scaffoldLengthDisplayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(genomeAssemblyAppLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(gcContentDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(graphicsLabel)
                        .addGap(1, 1, 1)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFastaItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFastaItemActionPerformed
        // This action opens the gene fasta file
        FileDialog nameBox;
        nameBox = new FileDialog(this, "Open FASTA file",
                FileDialog.LOAD);
        // Display the filechooser dialog and wait
        nameBox.setVisible(true);
        String fileDirectory = nameBox.getDirectory();
        String filename = nameBox.getFile();
        filename = fileDirectory.concat(filename);
        System.out.println(filename);

        try {
            // Read content of the file and append to textArea
            CSVReader reader = new CSVReader(
                    new FileReader(filename)
            );
            String[] nextLine;
            while ((nextLine = reader.readNext()) != null) {
                fastaDisplayArea.append(nextLine[0] + "\n");
            }
            // Populate the scaffold list
            populateScaffoldList();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(genomeAssemblyFrame.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(genomeAssemblyFrame.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }

    private void populateScaffoldList() {
        String fastaSequence = fastaDisplayArea.getText();
        List<String> scaffolds = extractScaffoldNames(fastaSequence);

        // Clear existing items and add the new scaffold names
        scaffoldsComboBox.removeAllItems();
        for (String scaffold : scaffolds) {
            scaffoldsComboBox.addItem(scaffold);
        }
    }

    private List<String> extractScaffoldNames(String fastaSequence) {
        List<String> scaffoldNames = new ArrayList<>();
        String[] lines = fastaSequence.split("\n");

        for (String line : lines) {
            line = line.trim();
            if (!line.isEmpty() && line.startsWith(">")) {
                scaffoldNames.add(line.substring(1)); // Remove '>'
            }
        }

        return scaffoldNames;
    }//GEN-LAST:event_openFastaItemActionPerformed

    private void openGenomeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGenomeFileActionPerformed

    }//GEN-LAST:event_openGenomeFileActionPerformed

    private void getGenomeStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getGenomeStatActionPerformed
        // TODO add your handling code here:
        String fastaSequence = fastaDisplayArea.getText();
        List<Integer> contigLengths = extractContigLengths(fastaSequence);
        List<Integer> scaffoldLengths = extractScaffoldLengths(fastaSequence);

        if (contigLengths.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "No contig lengths found.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        } else if (scaffoldLengths.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                    "No scaffold lengths found.", "Error", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Collections.sort(contigLengths, Collections.reverseOrder());
        Collections.sort(scaffoldLengths, Collections.reverseOrder());

        int totalSize = 0;
        for (int length : contigLengths) {
            totalSize += length;
        }

        int totalContigSize = contigLengths.stream().mapToInt(Integer::intValue).sum();
        int totalGapCount = 0;
        int n50Threshold = totalContigSize / 2;
        int cumulativeSum = 0;
        int n50 = 0;
        int largestContig = 0;
        int totalContigs = contigLengths.size();
        int largestScaffold = 0;
        int totalScaffolds = scaffoldLengths.size();

        for (int length : contigLengths) {
            cumulativeSum += length;
            if (cumulativeSum >= n50Threshold && n50 == 0) {
                n50 = length;
                //  break;
            }
            if (length > largestContig) {
                largestContig = length;
            }
        }

        for (int length : scaffoldLengths) {
            totalSize += length;
            totalGapCount += countGapLengths(fastaSequence, length);

            if (length > largestScaffold) {
                largestScaffold = length;
            }
        }

        double averageScaffoldLength = (double) totalSize / totalScaffolds;
        double averageLength = (double) totalSize / totalContigs;
        //Print assembly metrics in message dialougue
        String resultMessage = String.format("Total Length: %d\nN50: "
                + "%d\nLargest Contig: %d\nAverage Contig Length: %.2f\nTotal Contigs: "
                + "%d\nLargest Scaffold: %d\nAverage Scaffold Length: %.2f\nTotal Scaffolds: %d",
                totalSize, n50, largestContig, averageLength, totalContigs,
                largestScaffold, averageScaffoldLength, totalScaffolds);
        JOptionPane.showMessageDialog(this, resultMessage,
                "Assembly Quality Metrics", JOptionPane.INFORMATION_MESSAGE);
    }

    private List<Integer> extractScaffoldLengths(String fastaSequence) {
        List<Integer> scaffoldLengths = new ArrayList<>();
        String[] lines = fastaSequence.split("\n");

        int currentLength = 0;
        for (String line : lines) {
            line = line.trim();
            if (!line.isEmpty()) {
                if (line.startsWith(">")) {
                    // Header line, save the length of the previous scaffold (if any)
                    if (currentLength > 0) {
                        scaffoldLengths.add(currentLength);
                        currentLength = 0;
                    }
                } else {
                    // Sequence line, update the current scaffold length
                    currentLength += line.length();
                }
            }
        }
        // Save the length of the last scaffold (if any)
        if (currentLength > 0) {
            scaffoldLengths.add(currentLength);
        }
        return scaffoldLengths;
    }

    private int countGapLengths(String fastaSequence, int scaffoldLength) {
        // Count the number of 'N's within the scaffold, representing gaps
        int gapCount = 0;
        int currentScaffoldLength = 0;
        boolean withinScaffold = false;

        for (char base : fastaSequence.toCharArray()) {
            if (base == 'N' || base == 'n') {
                if (!withinScaffold) {
                    withinScaffold = true;
                    currentScaffoldLength = 1;
                } else {
                    currentScaffoldLength++;
                }
            } else if (withinScaffold) {
                gapCount += currentScaffoldLength;
                withinScaffold = false;
            }
        }
        // Check if the last part of the sequence is a gap
        if (withinScaffold) {
            gapCount += currentScaffoldLength;
        }

        return gapCount;
    }//GEN-LAST:event_getGenomeStatActionPerformed

    private void scaffoldsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaffoldsComboBoxActionPerformed
        //Get selected scaffold from combobox and display metrics
        String selectedScaffold = (String) scaffoldsComboBox.getSelectedItem();
        String fastaSequence = fastaDisplayArea.getText();  

        if (selectedScaffold != null && !selectedScaffold.isEmpty()) {
            String filteredSequence = filterFastaSequence(fastaSequence, selectedScaffold);
            //Display scaffold sequence with line breaks
            scaffoldTextArea.append(formatSequence(filteredSequence) + "\n");  
            //Calculate and display GC content
            double gcContent = getGCcontent(filteredSequence);

            gcContentDisplayLabel.setText("GC content: " + gcContent + "%");           
        }

    }

    private String formatSequence(String sequence) {
        // Add line breaks at regular intervals for better readability
        int lineLength = 60;  // Adjust the line length as needed
        StringBuilder formattedSequence = new StringBuilder();

        for (int i = 0; i < sequence.length(); i += lineLength) {
            int endIndex = Math.min(i + lineLength, sequence.length());
            formattedSequence.append(sequence, i, endIndex).append("\n");
        }

        return formattedSequence.toString();
    }

    private double getGCcontent(String scaffoldSequence) {
        String sequence = scaffoldSequence.replaceAll("\\s", "");
        int sequenceLength = 0;
        //Exclude headers
        sequence = sequence.replaceAll(">", "");
        sequenceLength = sequence.length();
        scaffoldLengthDisplayLabel.setText("Length: " + sequenceLength);
        //count number of Gs and Cs in the sequence
        int GCcount = 0;
        for (char base : scaffoldSequence.toCharArray()) {
            if (base == 'G' || base == 'C') {
                GCcount++;
            }
        }

        //Calculate GC content using floating-point division
        double gcContent = ((double) GCcount / sequenceLength) * 100;
        //Format the result to 2 decimal places
        return Double.parseDouble(String.format("%.2f", gcContent));
    }

    private String filterFastaSequence(String fastaSequence, String selectedScaffold) {
        StringBuilder filteredSequence = new StringBuilder();
        boolean withinSelectedScaffold = false;

        for (String line : fastaSequence.split("\n")) {
            line = line.trim();

            if (line.startsWith(">")) {
                scaffoldTextArea.setText("");
                // Header line
                if (line.substring(1).startsWith(selectedScaffold)) {
                    withinSelectedScaffold = true;
                    filteredSequence.append(line).append("\n");
                } else {
                    withinSelectedScaffold = false;
                }
            } else if (withinSelectedScaffold) {
                // Sequence line within the selected scaffold
                filteredSequence.append(line);
            }
        }

        return filteredSequence.toString();

    }//GEN-LAST:event_scaffoldsComboBoxActionPerformed

    private void openGTFMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGTFMenuItem1ActionPerformed
        // TODO add your handling code here:
        //This method opens a gtf file and display it content in a table
        FileDialog nameBox;
        nameBox = new FileDialog(this, "Open GTF file",
                FileDialog.LOAD);
        //Display the filechooser dialog and wait
        nameBox.setVisible(true);
        String fileDirectory = nameBox.getDirectory();
        String filename = nameBox.getFile();
        filename = fileDirectory.concat(filename);

        try {
            //Read the content of the GTF file
            CSVReader reader = new CSVReader(
                    new FileReader(filename)
            );
            //Create table model to display gtf content
            DefaultTableModel model = (DefaultTableModel) gtfTable1.getModel();
            //Add columns to the table
            model.addColumn("Chromosome");
            model.addColumn("Source");
            model.addColumn("Feature");
            model.addColumn("Start");
            model.addColumn("End");
            model.addColumn("Score");
            model.addColumn("Strand");
            model.addColumn("Frame");
            model.addColumn("Attribute");

            //Read each line and add it to the table
            String[] nextLine;
            while ((nextLine = reader.readNext()) != null) {
                if (!nextLine[0].startsWith("#" )) {
                    String[] dataRow = nextLine[0].split("\t");
                    model.addRow(dataRow);
                }
            }
            reader.close();
            pack();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage());
        }
    }//GEN-LAST:event_openGTFMenuItem1ActionPerformed

    private List<Integer> extractContigLengths(String fastaSequence) {
        List<Integer> contigLengths = new ArrayList<>();
        String[] lines = fastaSequence.split("\n");

        int currentLength = 0;
        for (String line : lines) {
            line = line.trim();
            if (!line.isEmpty()) {
                if (line.startsWith(">")) {
                    // Header line, save the length of the previous contig (if any)
                    if (currentLength > 0) {
                        contigLengths.add(currentLength);
                        currentLength = 0;
                    }
                } else {
                    // Sequence line, update the current contig length
                    currentLength += line.length();
                }
            }
        }

        // Save the length of the last contig (if any)
        if (currentLength > 0) {
            contigLengths.add(currentLength);
        }

        return contigLengths;
    }

    private static class fastaDisplayArea {

        private static String getText() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private static void append(String string) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        public fastaDisplayArea() {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(genomeAssemblyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(genomeAssemblyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(genomeAssemblyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(genomeAssemblyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new genomeAssemblyFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GTFtableLabel;
    private javax.swing.JTextArea fastaDisplayArea;
    private javax.swing.JLabel fastaDisplayLabel;
    private javax.swing.JLabel gcContentDisplayLabel;
    private javax.swing.JLabel genomeAssemblyAppLabel;
    private javax.swing.JMenuBar genomeAssemblyAppMenuBar;
    private javax.swing.JButton getGenomeStat;
    private javax.swing.JLabel graphicsLabel;
    private javax.swing.JTable gtfTable1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem openFastaItem;
    private javax.swing.JMenuItem openGTFMenuItem1;
    private javax.swing.JMenu openGenomeFile;
    private javax.swing.JLabel scaffoldLengthDisplayLabel;
    private javax.swing.JTextArea scaffoldTextArea;
    private javax.swing.JComboBox<String> scaffoldsComboBox;
    private javax.swing.JLabel scfListLabel;
    private javax.swing.JLabel selectedScaffoldLabel;
    // End of variables declaration//GEN-END:variables
}
